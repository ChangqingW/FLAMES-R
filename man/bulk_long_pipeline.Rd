% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bulk_long_pipeline.R
\name{bulk_long_pipeline}
\alias{bulk_long_pipeline}
\title{Pipeline for Bulk Data}
\usage{
bulk_long_pipeline(
  annot,
  fastq,
  in_bam = NULL,
  outdir,
  genome_fa,
  minimap2_dir = NULL,
  downsample_ratio = 1,
  config_file = NULL,
  do_genome_align = TRUE,
  do_isoform_id = TRUE,
  do_read_realign = TRUE,
  do_transcript_quanti = TRUE,
  gen_raw_isoform = TRUE,
  has_UMI = FALSE,
  MAX_DIST = 10,
  MAX_TS_DIST = 100,
  MAX_SPLICE_MATCH_DIST = 10,
  min_fl_exon_len = 40,
  Max_site_per_splice = 3,
  Min_sup_cnt = 10,
  Min_cnt_pct = 0.01,
  Min_sup_pct = 0.2,
  strand_specific = 1,
  remove_incomp_reads = 5,
  use_junctions = TRUE,
  no_flank = TRUE,
  use_annotation = TRUE,
  min_tr_coverage = 0.75,
  min_read_coverage = 0.75
)
}
\arguments{
\item{annot}{gene annotations file in gff3  format}

\item{fastq}{the directory containing the fastq input files to merge into one, \code{merged.fastq.gz}. If \code{merged.fastq.gz} already
exists, the fastq files are not merged and the existing merged file is used.}

\item{in_bam}{optional BAM file which replaces fastq directory argument. This skips the genome alignment and
realignment steps}

\item{outdir}{directory to store all output files.}

\item{genome_fa}{genome fasta file.}

\item{minimap2_dir}{directory containing minimap2, k8 and paftools.js program.
k8 and paftools.js are used to convert gff3 to bed12.}

\item{downsample_ratio}{downsampling ratio if performing downsampling analysis.}

\item{config_file}{JSON configuration file. If specified, \code{config_file} overrides
all configuration parameters}

\item{do_genome_align}{Boolean. Specifies whether to run the genome alignment step. \code{TRUE} is recommended}

\item{do_isoform_id}{Boolean. Specifies whether to run the isoform identification step. \code{TRUE} is recommended}

\item{do_read_realign}{Boolean. Specifies whether to run the read realignment step. \code{TRUE} is recommended}

\item{do_transcript_quanti}{Boolean. Specifies whether to run the transcript quantification step. \code{TRUE} is recommended}

\item{gen_raw_isoform}{Boolean.}

\item{has_UMI}{Boolean. Speficies if each gene as a UMI.}

\item{MAX_DIST}{Numeric}

\item{MAX_TS_DIST}{Numeric.}

\item{MAX_SPLICE_MATCH_DIST}{Numeric.}

\item{min_fl_exon_len}{Numeric.}

\item{Max_site_per_splice}{Numeric.}

\item{Min_sup_cnt}{Numeric.}

\item{Min_cnt_pct}{Numeric.}

\item{Min_sup_pct}{Numeric.}

\item{strand_specific}{1, -1 or 0. 1 indicates if reads are in the same
strand as mRNA, -1 indicates reads are reverse complemented, 0 indicates
reads are not strand specific.}

\item{remove_incomp_reads}{Numeric.}

\item{use_junctions}{Boolean.}

\item{no_flank}{Boolean.}

\item{use_annotation}{Boolean.}

\item{min_tr_coverage}{Numeric.}

\item{min_read_coverage}{Numeric.}
}
\value{
\code{bulk_long_pipeline} returns a SummarizedExperiment object, containing a count
matrix as an assay, gene annotations under metadata, as well as a list of the other
output files generated by the pipeline. The pipeline also outputs a number of output
files into the given \code{outdir} directory. These output files generated by the pipeline are:
\itemize{
\item{transcript_count.csv.gz}{ - a transcript count matrix (also contained in the SummarizedExperiment)}
\item{isoform_annotated.filtered.gff3}{ - isoforms in gff3 format (also contained in the SummarizedExperiment)}
\item{transcript_assembly.fa}{ - transcript sequence from the isoforms}
\item{align2genome.bam}{ - sorted BAM file with reads aligned to genome}
\item{realign2transcript.bam}{ - sorted realigned BAM file using the transcript_assembly.fa as reference}
\item{tss_tes.bedgraph}{ - TSS TES enrichment for all reads (for QC)}
}
}
\description{
Semi-supervised isofrom detection and annotation for long read data.
This variant is meant for bulk samples. Specific parameters relating to
analysis can be changed either through function arguments, or through a
configuration JSON file.
}
\details{
The default parameters can be changed either through the function
arguments are through the configuration JSON file \code{config_file}. the \code{pipeline_parameters}
section specifies which steps are to be executed in the pipeline - by default, all
steps are executed. The \code{isoform_parameters} section affects isoform detection - key
parameters include:
\itemize{
\item{\code{Min_sup_cnt}}{ which causes transcripts with less reads aligned than
it's value to be discarded}
\item{\code{MAX_TS_DIST}}{ which merges transcripts with the same intron
chain and TSS/TES distace less than \code{MAX_TS_DIST}}
\item{\code{strand_specific}}{ which specifies if reads are in the same strand as the mRNA (1),
or the reverse complemented (-1) or not strand specific (0), which results in
strand information being based on reference annotation.}
}
}
\examples{
# download the two fastq files, move them to a folder to be merged together
temp_path <- tempfile()
bfc <- BiocFileCache::BiocFileCache(temp_path, ask=FALSE)
file_url <- 
    "https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data"
# download the required fastq files, and move them to new folder
fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, "Fastq1", paste(file_url, "fastq/sample1.fastq.gz", sep="/")))]]
fastq2 <- bfc[[names(BiocFileCache::bfcadd(bfc, "Fastq2", paste(file_url, "fastq/sample2.fastq.gz", sep="/")))]]
fastq_dir <- paste(temp_path, "fastq_dir", sep="/") # the downloaded fastq files need to be in a directory to be merged together
dir.create(fastq_dir)
file.copy(c(fastq1, fastq2), fastq_dir)
unlink(c(fastq1, fastq2)) # the original files can be deleted

# run the FLAMES bulk pipeline, using the downloaded files
se <- bulk_long_pipeline(annot=system.file("extdata/SIRV_anno.gtf", package="FLAMES"), 
                   fastq=fastq_dir,
                   outdir=tempdir(), genome_fa=system.file("extdata/SIRV_genomefa.fasta", package="FLAMES"),
                   config_file=system.file("extdata/SIRV_config_default.json", package="FLAMES"))

}
\seealso{
\code{\link[=sc_long_pipeline]{sc_long_pipeline()}} for single cell data,
\code{\link[=SummarizedExperiment]{SummarizedExperiment()}} for how data is outputted
}
