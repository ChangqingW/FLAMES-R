% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sc_mutations.R
\name{find_variants}
\alias{find_variants}
\title{bulk variant identification}
\usage{
find_variants(
  bam_path,
  reference,
  annotation,
  min_nucleotide_depth = 100,
  homopolymer_window = 3,
  threads = 1
)
}
\arguments{
\item{bam_path}{character(1) or character(n): path to the bam file(s) aligned to the
reference genome (NOT the transcriptome!).}

\item{reference}{DNAStringSet: the reference genome}

\item{annotation}{GRanges: the annotation of the reference genome. You can load
a GTF/GFF annotation file with \code{anno <- rtracklayer::import(file)}.}

\item{min_nucleotide_depth}{integer(1): minimum read depth for a position to be
considered a variant.}

\item{threads}{integer(1): number of threads to use.}
}
\value{
A tibble with columns: seqnames, pos, nucleotide, count, sum, freq, ref, gene,
homopolymer_pct. The homopolymer percentage is calculated as the percentage of the
most frequent nucleotide in a window of \code{homopolymer_window} nucleotides around
the variant position, excluding the variant position itself.
}
\description{
Treat each bam file as a bulk sample and identify variants against the reference
}
\details{
Each bam file is treated as a bulk sample to perform pileup and identify variants.
You can run \code{sc_mutations} with the variants identified with this function
to get single-cell allele counts. Note that reference genome FASTA files may have
the chromosome names field as `>chr1 1` instead of `>chr1`. You may need to remove
the trailing number to match the chromosome names in the bam file, for example with
\code{names(ref) <- sapply(names(ref), function(x) strsplit(x, " ")[[1]][1])}.
}
\examples{
outdir <- tempfile()
dir.create(outdir)
genome_fa <- file.path(outdir, "rps24.fa")
R.utils::gunzip(filename = system.file("extdata/rps24.fa.gz", package = "FLAMES"), destname = genome_fa, remove = FALSE)
download.file("https://raw.githubusercontent.com/mritchielab/FLAMES/devel/tests/testthat/demultiplexed.fq",
  destfile = file.path(outdir, "demultipelxed.fq")
) # can't be bothered to run demultiplexing again
if (is.character(locate_minimap2_dir())) {
  minimap2_align( # align to genome
    config = jsonlite::fromJSON(system.file("extdata/SIRV_config_default.json", package = "FLAMES")),
    fa_file = genome_fa,
    fq_in = file.path(outdir, "demultipelxed.fq"),
    annot = system.file("extdata/rps24.gtf.gz", package = "FLAMES"),
    outdir = outdir
  )
  variants <- find_variants(
    bam_path = file.path(outdir, "align2genome.bam"),
    reference = genome_fa,
    annotation = GenomicRanges::GRanges("chr14", IRanges::IRanges(1, 1)),
    min_nucleotide_depth = 10
  )
  head(variants)
}
}
