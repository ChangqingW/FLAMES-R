% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/windows_pipelines.R
\name{windows_pipeline_isoforms}
\alias{windows_pipeline_isoforms}
\title{Windows Pipeline - Find Isoforms}
\usage{
windows_pipeline_isoforms(pipeline_variables)
}
\arguments{
\item{pipeline_variables}{the list returned from \code{windows_pipeline_isoforms}.}
}
\value{
the updated \code{pipeline_variables} list, with information required for the final pipeline step.
}
\description{
This is the second step in the 3 step Windows FLAMES pipeline. 
Following this step, read realignment should be undertaken, using the file paths
given in the return pipeline_variables$return_files.
After this has been completed, the final pipeline step, \code{windows_pipeline_quantification} should be run,
giving the returned list from this function as input.
}
\examples{
## example windows pipeline for BULK data. See Vignette for single cell data.

# download the two fastq files, move them to a folder to be merged together
temp_path <- tempfile()
bfc <- BiocFileCache::BiocFileCache(temp_path, ask=FALSE)
file_url <- 
    "https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data"
# download the required fastq files, and move them to new folder
fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, "Fastq1", paste(file_url, "fastq/sample1.fastq.gz", sep="/")))]]
fastq2 <- bfc[[names(BiocFileCache::bfcadd(bfc, "Fastq2", paste(file_url, "fastq/sample2.fastq.gz", sep="/")))]]
fastq_dir <- paste(temp_path, "fastq_dir", sep="/") # the downloaded fastq files need to be in a directory to be merged together
dir.create(fastq_dir)
file.copy(c(fastq1, fastq2), fastq_dir)
unlink(c(fastq1, fastq2)) # the original files can be deleted

# run the FLAMES bulk pipeline setup
pipeline_variables <- bulk_windows_pipeline_setup(annot=system.file("extdata/SIRV_anno.gtf", package="FLAMES"), 
                   fastq=fastq_dir,
                   outdir=tempdir(), genome_fa=system.file("extdata/SIRV_genomefa.fasta", package="FLAMES"),
                   config_file=system.file("extdata/SIRV_config_default.json", package="FLAMES"))
# read alignment is handled externally (below downloads aligned bam for example)
genome_bam <- paste0(temp_path, "/align2genome.bam")
file.rename(bfc[[names(BiocFileCache::bfcadd(bfc, "Genome BAM", paste(file_url, "align2genome.bam", sep="/")))]], genome_bam)

genome_index <- paste0(temp_path, "/align2genome.bam.bai")
file.rename(bfc[[names(BiocFileCache::bfcadd(bfc, "Genome BAM Index", paste(file_url, "align2genome.bam.bai", sep="/")))]], genome_index)
pipeline_variables$genome_bam = genome_bam

# run the FLAMES bulk pipeline find isoforms step
pipeline_variables <- windows_pipeline_isoforms(pipeline_variables)

# read realignment is handled externally
realign_bam <- paste0(temp_path, "/realign2genome.bam")
file.rename(bfc[[names(BiocFileCache::bfcadd(bfc, "Realign BAM", paste(file_url, "realign2transcript.bam", sep="/")))]], realign_bam)

realign_index <- paste0(temp_path, "/realign2genome.bam.bai")
file.rename(bfc[[names(BiocFileCache::bfcadd(bfc, "Realign BAM Index", paste(file_url, "realign2transcript.bam.bai", sep="/")))]], realign_index)
pipeline_variables$realign_bam <- realign_bam

# finally, quantification, which returns a Summarized Experiment object
se <- windows_pipeline_quantification(pipeline_variables)
}
