% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_barcode.R
\name{find_barcode}
\alias{find_barcode}
\title{Match Cell Barcodes}
\usage{
find_barcode(
  fastq,
  barcodes_file,
  max_bc_editdistance = 2,
  max_flank_editdistance = 8,
  reads_out,
  stats_out,
  threads = 1,
  pattern = c(primer = "CTACACGACGCTCTTCCGATCT", BC = paste0(rep("N", 16), collapse =
    ""), UMI = paste0(rep("N", 12), collapse = ""), polyT = paste0(rep("T", 9), collapse
    = "")),
  TSO_seq = "",
  TSO_prime = 3,
  strand = "+",
  full_length_only = FALSE
)
}
\arguments{
\item{fastq}{character vector of paths to FASTQ files or folders, if
named, the names will be used as sample names, otherwise the file names will be used}

\item{barcodes_file}{path to file containing barcode allow-list, with one barcode in each line}

\item{max_bc_editdistance}{max edit distances for the barcode sequence}

\item{max_flank_editdistance}{max edit distances for the flanking sequences (primer and polyT)}

\item{reads_out}{path to output FASTQ file; if multiple samples are processed,
the sample name will be appended to this argument, e.g. provide \code{path/out.fq} for single
sample, and \code{path/prefix} for multiple samples.}

\item{stats_out}{path of output stats file; similar to \code{reads_out}, e.g. provide
\code{path/stats.tsv} for single sample, and \code{path/prefix} for multiple samples.}

\item{threads}{number of threads to be used}

\item{pattern}{named character vector defining the barcode pattern}

\item{TSO_seq}{TSO sequence to be trimmed}

\item{TSO_prime}{either 3 (when \code{TSO_seq} is on 3' the end) or 5 (on 5' end)}

\item{strand}{strand of the barcode pattern, either '+' or '-' (read will be reverse complemented
after barcode matching if '-')}

\item{full_length_only}{boolean, when TSO sequence is provided, whether reads without TSO
are to be discarded}
}
\value{
a list containing: \code{reads_tb} (tibble of read demultiplexed information) and
\code{input}, \code{output}, \code{read1_with_adapter} from cutadapt report
(if TSO trimming is performed)
}
\description{
demultiplex reads with flexiplex
}
\details{
This function demultiplexes reads by searching for flanking sequences (adaptors)
around the barcode sequence, and then matching against allowed barcodes. For single
sample, either provide a single FASTQ file or a folder containing FASTQ files. For
multiple samples, provide a vector of paths (either to FASTQ files or folders containing
FASTQ files). Gzipped file input are supported but the output will be uncompressed.
}
\examples{
outdir <- tempfile()
dir.create(outdir)
bc_allow <- file.path(outdir, "bc_allow.tsv")
R.utils::gunzip(
  filename = system.file("extdata", "bc_allow.tsv.gz", package = "FLAMES"),
  destname = bc_allow, remove = FALSE
)
# single sample
find_barcode(
  fastq = system.file("extdata", "fastq", "musc_rps24.fastq.gz", package = "FLAMES"),
  stats_out = file.path(outdir, "bc_stat"),
  reads_out = file.path(outdir, "demultiplexed.fq"),
  barcodes_file = bc_allow
)
# multi-sample
fastq_dir <- tempfile()
dir.create(fastq_dir)
file.copy(system.file("extdata", "fastq", "musc_rps24.fastq.gz", package = "FLAMES"),
  file.path(fastq_dir, "musc_rps24.fastq.gz"))
sampled_lines <- readLines(file.path(fastq_dir, "musc_rps24.fastq.gz"), n = 400)
writeLines(sampled_lines, file.path(fastq_dir, "copy.fastq"))
result <- find_barcode(
  # you can mix folders and files. each path will be considered as a sample
  fastq = c(fastq_dir, system.file("extdata", "fastq", "musc_rps24.fastq.gz", package = "FLAMES")),
  stats_out = file.path(outdir, "bc_stat"),
  reads_out = file.path(outdir, "demultiplexed.fq"),
  barcodes_file = bc_allow, TSO_seq = "CCCATGTACTCTGCGTTGATACCACTGCTT"
)
}
