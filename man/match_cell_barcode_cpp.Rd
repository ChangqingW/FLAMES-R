% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{match_cell_barcode_cpp}
\alias{match_cell_barcode_cpp}
\title{Match Cell Barcodes}
\usage{
match_cell_barcode_cpp(
  fastq_dir,
  stats_file,
  out_fastq,
  ref_csv,
  MAX_DIST,
  UMI_LEN = 10L
)
}
\arguments{
\item{fastq_dir}{directory containing fastq files to match}

\item{stats_file}{NEEDED}

\item{out_fastq}{output filename for matched barcodes}

\item{ref_csv}{NEEDED}

\item{MAX_DIST}{int; maximum edit distance}

\item{UMI_LEN}{int; length of UMI sequences}
}
\value{
returns NULL
}
\description{
Match cell barcodes in the given fastq directory with the reference csv, \code{ref_csv}. Matches are returned
in the output file \code{out_fastq}
The flanking sequence is aligned to the first 30000 reads to identify the regions where cell barcode is likely to be found within. 
Next, sequences within this region are matched to barcodes in \code{ref_csv}, allowing \code{MAX_DIST} hamming distances. 
Reads that are successfully matched with a barcode are reported as the \code{barcode hm match} count. 
Every read that could not be matched in the previous step is aligned to the flanking sequence again to identify the location of 
barcode individually, and barcode matching is done with up to \code{MAX_DIST} levenshtein distances (allowing indels). Reads that are
matched by this step is reported as the \code{fuzzy match} counts.
}
\examples{
bc_allow <- file.path(outdir, "bc_allow.tsv")
match_cell_barcode_cpp(
   fastq_dir = system.file("extdata/fastq", package = "FLAMES"),
   stats_file = file.path(outdir, "bc_stat"),
   out_fastq = file.path(outdir, "demultiplexed.fq.gz"),
   ref_csv = bc_allow,
   MAX_DIST = 2,
   UMI_LEN = 10
)
}
